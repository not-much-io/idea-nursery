syntax = "proto3";
package rdocker;

service RDocker {
    // Just an example, to be removed
    rpc Echo(EchoRequest) returns (EchoResponse);
    
    // Register a new environment in remote
    // Safe operation that fails if any conflicts with existing envs
    // Reuses processes that other envs have already set up
    rpc RegisterEnv(RegisterEnvRequest) returns (RegisterEnvResponse);

    // Get the current state of an env
    rpc ReadEnv(ReadEnvRequest) returns (ReadEnvResponse);

    // List all the envs in remote
    rpc ListEnvs(ListEnvsRequest) returns (ListEnvsResponse);

    // Unregister end and clear all setup done for it
    // Safe operation that won't effect src on local
    rpc UnregisterEnv(UnregisterEnvRequest) returns (UnregisterEnvResponse);

    // Setup in-memory fs on the rdockerd host
    rpc SetupInMemoryFs(SetupInMemoryFsRequest) returns (SetupInMemoryFsResponse);

    // Setup two way fs sync between local project dir and remote in-memory fs
    rpc SetupFsSync(SetupFsSyncRequest) returns (SetupFsSyncResponse);

    // Setup transparent proxying from remote through local
    rpc SetupTransparentProxy(SetupTransparentProxyRequest) returns (SetupTransparentProxyResponse);
}

message EchoRequest {
    string message = 1;
}

message EchoResponse {
    string message = 1;
}

message EnvDescriptor {
    string env_id = 1;

    string local_ip   = 2;
    string local_user = 3;
    string local_path = 4;

    string remote_ip   = 5;
    string remote_user = 6;
    string remote_path = 7;

    int32  fs_max_size = 8;

    enum Status {
        Registered                = 0;
        SettingUpInMemoryFs       = 1;
        SettingUpTransparentProxy = 2;
        SettingUpFsSync           = 3;
        Ready                     = 4;
        Errored                   = 5;
    }

    enum Error {
        // TODO: Enumerate
        Unspecified = 0;
    }

    Status status = 9;
    Error  error  = 10;
}

message RegisterEnvRequest {
    EnvDescriptor env_desc = 1;
}

message RegisterEnvResponse {
    string env_id = 1;

    enum Error {
        EnvWithIDExists = 0;
        SSHTestFailed   = 1;
    }

    Error error = 2;
}

message ReadEnvRequest {
    string env_id = 1;
}

message ReadEnvResponse {
    EnvDescriptor env_desc = 1;
}

message ListEnvsRequest {}

message ListEnvsResponse {
    repeated EnvDescriptor env_descs = 1;
}

message UnregisterEnvRequest {
    string env_id = 1;
}

message UnregisterEnvResponse {
    enum Error {
        // TODO: Enumerate
        Unspecified = 0;
    }

    Error error = 1;
}

message SetupInMemoryFsRequest {
    string env_id = 1;
}

message SetupInMemoryFsResponse {
    enum Error {
        // TODO: Enumerate
        Unspecified = 0;
    }
    
    Error error = 1;
}

message SetupFsSyncRequest {
    string env_id = 1;
}

message SetupFsSyncResponse {
    enum Error {
        // TODO: Enumerate
        Unspecified = 0;
    }

    Error error = 1;
}

message SetupTransparentProxyRequest {
    string env_id = 1;
}

message SetupTransparentProxyResponse {
    enum Error {
        // TODO: Enumerate
        Unspecified = 0;
    }

    Error error = 1;
}
